# array-codes

Q.1Given a sorted array of integers A (0-indexed) of size N, find the starting and the ending position of a given integer B in array A.

Your algorithm's runtime complexity must be in the order of O(log n).

Return an array of size 2, such that the first element = starting position of B in A and the second element = ending position of B in A, if B is not found in A return [-1, -1].

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int[] searchRange(final int[] A, int B) {


        int[] ans=new int[2];
        int l=0;
        int r=A.length-1;
        int first=-1;
        int second=-1;

        while(l<=r)
        {
            int mid=l+(r-l)/2;

            if(A[mid]==B)
            {
                first=mid;
                r=mid-1;

            }
            else if(A[mid]>B)
            {
                r=mid-1;
            }
            else{
                l=mid+1;;
            }
        }
        l=0;
        r=A.length-1;

        while(l<=r)
        {
            int mid=l+(r-l)/2;

            if(A[mid]==B)
            {
                second=mid;
                l=mid+1;

            }
           else if(A[mid]>B)
            {
                r=mid-1;
            }
            else{
                l=mid+1;;
            }
        }
        ans[0]=first;
        ans[1]=second;

        return ans;
    }
}
